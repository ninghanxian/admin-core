// Code generated by goctl. DO NOT EDIT.
// Source: core.proto

package job

import (
	"context"

	"github.com/qmcloud/admin-core/rpc/types/core"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ApiInfo                  = core.ApiInfo
	ApiListReq               = core.ApiListReq
	ApiListResp              = core.ApiListResp
	BaseIDResp               = core.BaseIDResp
	BaseMsg                  = core.BaseMsg
	BaseResp                 = core.BaseResp
	BaseUUIDResp             = core.BaseUUIDResp
	CallbackReq              = core.CallbackReq
	DepartmentInfo           = core.DepartmentInfo
	DepartmentListReq        = core.DepartmentListReq
	DepartmentListResp       = core.DepartmentListResp
	DictionaryDetailInfo     = core.DictionaryDetailInfo
	DictionaryDetailListReq  = core.DictionaryDetailListReq
	DictionaryDetailListResp = core.DictionaryDetailListResp
	DictionaryInfo           = core.DictionaryInfo
	DictionaryListReq        = core.DictionaryListReq
	DictionaryListResp       = core.DictionaryListResp
	EmailInfo                = core.EmailInfo
	EmailLogInfo             = core.EmailLogInfo
	EmailLogListReq          = core.EmailLogListReq
	EmailLogListResp         = core.EmailLogListResp
	EmailProviderInfo        = core.EmailProviderInfo
	EmailProviderListReq     = core.EmailProviderListReq
	EmailProviderListResp    = core.EmailProviderListResp
	Empty                    = core.Empty
	IDReq                    = core.IDReq
	IDsReq                   = core.IDsReq
	MenuInfo                 = core.MenuInfo
	MenuInfoList             = core.MenuInfoList
	MenuRoleInfo             = core.MenuRoleInfo
	MenuRoleListResp         = core.MenuRoleListResp
	Meta                     = core.Meta
	OauthLoginReq            = core.OauthLoginReq
	OauthProviderInfo        = core.OauthProviderInfo
	OauthProviderListReq     = core.OauthProviderListReq
	OauthProviderListResp    = core.OauthProviderListResp
	OauthRedirectResp        = core.OauthRedirectResp
	PageInfoReq              = core.PageInfoReq
	PositionInfo             = core.PositionInfo
	PositionListReq          = core.PositionListReq
	PositionListResp         = core.PositionListResp
	RoleInfo                 = core.RoleInfo
	RoleListReq              = core.RoleListReq
	RoleListResp             = core.RoleListResp
	RoleMenuAuthorityReq     = core.RoleMenuAuthorityReq
	RoleMenuAuthorityResp    = core.RoleMenuAuthorityResp
	SmsInfo                  = core.SmsInfo
	SmsLogInfo               = core.SmsLogInfo
	SmsLogListReq            = core.SmsLogListReq
	SmsLogListResp           = core.SmsLogListResp
	SmsProviderInfo          = core.SmsProviderInfo
	SmsProviderListReq       = core.SmsProviderListReq
	SmsProviderListResp      = core.SmsProviderListResp
	TaskInfo                 = core.TaskInfo
	TaskListReq              = core.TaskListReq
	TaskListResp             = core.TaskListResp
	TaskLogInfo              = core.TaskLogInfo
	TaskLogListReq           = core.TaskLogListReq
	TaskLogListResp          = core.TaskLogListResp
	TokenInfo                = core.TokenInfo
	TokenListReq             = core.TokenListReq
	TokenListResp            = core.TokenListResp
	UUIDReq                  = core.UUIDReq
	UUIDsReq                 = core.UUIDsReq
	UserInfo                 = core.UserInfo
	UserListReq              = core.UserListReq
	UserListResp             = core.UserListResp
	UsernameReq              = core.UsernameReq

	Job interface {
		// Task management
		CreateTask(ctx context.Context, in *TaskInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateTask(ctx context.Context, in *TaskInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetTaskList(ctx context.Context, in *TaskListReq, opts ...grpc.CallOption) (*TaskListResp, error)
		GetTaskById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*TaskInfo, error)
		DeleteTask(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		// TaskLog management
		CreateTaskLog(ctx context.Context, in *TaskLogInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateTaskLog(ctx context.Context, in *TaskLogInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetTaskLogList(ctx context.Context, in *TaskLogListReq, opts ...grpc.CallOption) (*TaskLogListResp, error)
		GetTaskLogById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*TaskLogInfo, error)
		DeleteTaskLog(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	}

	defaultJob struct {
		cli zrpc.Client
	}
)

func NewJob(cli zrpc.Client) Job {
	return &defaultJob{
		cli: cli,
	}
}

// Task management
func (m *defaultJob) CreateTask(ctx context.Context, in *TaskInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := core.NewJobClient(m.cli.Conn())
	return client.CreateTask(ctx, in, opts...)
}

func (m *defaultJob) UpdateTask(ctx context.Context, in *TaskInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewJobClient(m.cli.Conn())
	return client.UpdateTask(ctx, in, opts...)
}

func (m *defaultJob) GetTaskList(ctx context.Context, in *TaskListReq, opts ...grpc.CallOption) (*TaskListResp, error) {
	client := core.NewJobClient(m.cli.Conn())
	return client.GetTaskList(ctx, in, opts...)
}

func (m *defaultJob) GetTaskById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*TaskInfo, error) {
	client := core.NewJobClient(m.cli.Conn())
	return client.GetTaskById(ctx, in, opts...)
}

func (m *defaultJob) DeleteTask(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewJobClient(m.cli.Conn())
	return client.DeleteTask(ctx, in, opts...)
}

// TaskLog management
func (m *defaultJob) CreateTaskLog(ctx context.Context, in *TaskLogInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := core.NewJobClient(m.cli.Conn())
	return client.CreateTaskLog(ctx, in, opts...)
}

func (m *defaultJob) UpdateTaskLog(ctx context.Context, in *TaskLogInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewJobClient(m.cli.Conn())
	return client.UpdateTaskLog(ctx, in, opts...)
}

func (m *defaultJob) GetTaskLogList(ctx context.Context, in *TaskLogListReq, opts ...grpc.CallOption) (*TaskLogListResp, error) {
	client := core.NewJobClient(m.cli.Conn())
	return client.GetTaskLogList(ctx, in, opts...)
}

func (m *defaultJob) GetTaskLogById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*TaskLogInfo, error) {
	client := core.NewJobClient(m.cli.Conn())
	return client.GetTaskLogById(ctx, in, opts...)
}

func (m *defaultJob) DeleteTaskLog(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewJobClient(m.cli.Conn())
	return client.DeleteTaskLog(ctx, in, opts...)
}
