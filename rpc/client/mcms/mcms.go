// Code generated by goctl. DO NOT EDIT.
// Source: core.proto

package mcms

import (
	"context"

	"github.com/qmcloud/admin-core/rpc/types/core"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ApiInfo                  = core.ApiInfo
	ApiListReq               = core.ApiListReq
	ApiListResp              = core.ApiListResp
	BaseIDResp               = core.BaseIDResp
	BaseMsg                  = core.BaseMsg
	BaseResp                 = core.BaseResp
	BaseUUIDResp             = core.BaseUUIDResp
	CallbackReq              = core.CallbackReq
	DepartmentInfo           = core.DepartmentInfo
	DepartmentListReq        = core.DepartmentListReq
	DepartmentListResp       = core.DepartmentListResp
	DictionaryDetailInfo     = core.DictionaryDetailInfo
	DictionaryDetailListReq  = core.DictionaryDetailListReq
	DictionaryDetailListResp = core.DictionaryDetailListResp
	DictionaryInfo           = core.DictionaryInfo
	DictionaryListReq        = core.DictionaryListReq
	DictionaryListResp       = core.DictionaryListResp
	EmailInfo                = core.EmailInfo
	EmailLogInfo             = core.EmailLogInfo
	EmailLogListReq          = core.EmailLogListReq
	EmailLogListResp         = core.EmailLogListResp
	EmailProviderInfo        = core.EmailProviderInfo
	EmailProviderListReq     = core.EmailProviderListReq
	EmailProviderListResp    = core.EmailProviderListResp
	Empty                    = core.Empty
	IDReq                    = core.IDReq
	IDsReq                   = core.IDsReq
	MenuInfo                 = core.MenuInfo
	MenuInfoList             = core.MenuInfoList
	MenuRoleInfo             = core.MenuRoleInfo
	MenuRoleListResp         = core.MenuRoleListResp
	Meta                     = core.Meta
	OauthLoginReq            = core.OauthLoginReq
	OauthProviderInfo        = core.OauthProviderInfo
	OauthProviderListReq     = core.OauthProviderListReq
	OauthProviderListResp    = core.OauthProviderListResp
	OauthRedirectResp        = core.OauthRedirectResp
	PageInfoReq              = core.PageInfoReq
	PositionInfo             = core.PositionInfo
	PositionListReq          = core.PositionListReq
	PositionListResp         = core.PositionListResp
	RoleInfo                 = core.RoleInfo
	RoleListReq              = core.RoleListReq
	RoleListResp             = core.RoleListResp
	RoleMenuAuthorityReq     = core.RoleMenuAuthorityReq
	RoleMenuAuthorityResp    = core.RoleMenuAuthorityResp
	SmsInfo                  = core.SmsInfo
	SmsLogInfo               = core.SmsLogInfo
	SmsLogListReq            = core.SmsLogListReq
	SmsLogListResp           = core.SmsLogListResp
	SmsProviderInfo          = core.SmsProviderInfo
	SmsProviderListReq       = core.SmsProviderListReq
	SmsProviderListResp      = core.SmsProviderListResp
	TaskInfo                 = core.TaskInfo
	TaskListReq              = core.TaskListReq
	TaskListResp             = core.TaskListResp
	TaskLogInfo              = core.TaskLogInfo
	TaskLogListReq           = core.TaskLogListReq
	TaskLogListResp          = core.TaskLogListResp
	TokenInfo                = core.TokenInfo
	TokenListReq             = core.TokenListReq
	TokenListResp            = core.TokenListResp
	UUIDReq                  = core.UUIDReq
	UUIDsReq                 = core.UUIDsReq
	UserInfo                 = core.UserInfo
	UserListReq              = core.UserListReq
	UserListResp             = core.UserListResp
	UsernameReq              = core.UsernameReq

	Mcms interface {
		SendEmail(ctx context.Context, in *EmailInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
		// EmailLog management
		CreateEmailLog(ctx context.Context, in *EmailLogInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
		UpdateEmailLog(ctx context.Context, in *EmailLogInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetEmailLogList(ctx context.Context, in *EmailLogListReq, opts ...grpc.CallOption) (*EmailLogListResp, error)
		GetEmailLogById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*EmailLogInfo, error)
		DeleteEmailLog(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		// EmailProvider management
		CreateEmailProvider(ctx context.Context, in *EmailProviderInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateEmailProvider(ctx context.Context, in *EmailProviderInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetEmailProviderList(ctx context.Context, in *EmailProviderListReq, opts ...grpc.CallOption) (*EmailProviderListResp, error)
		GetEmailProviderById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*EmailProviderInfo, error)
		DeleteEmailProvider(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error)
		SendSms(ctx context.Context, in *SmsInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
		// SmsLog management
		CreateSmsLog(ctx context.Context, in *SmsLogInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error)
		UpdateSmsLog(ctx context.Context, in *SmsLogInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetSmsLogList(ctx context.Context, in *SmsLogListReq, opts ...grpc.CallOption) (*SmsLogListResp, error)
		GetSmsLogById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*SmsLogInfo, error)
		DeleteSmsLog(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error)
		// SmsProvider management
		CreateSmsProvider(ctx context.Context, in *SmsProviderInfo, opts ...grpc.CallOption) (*BaseIDResp, error)
		UpdateSmsProvider(ctx context.Context, in *SmsProviderInfo, opts ...grpc.CallOption) (*BaseResp, error)
		GetSmsProviderList(ctx context.Context, in *SmsProviderListReq, opts ...grpc.CallOption) (*SmsProviderListResp, error)
		GetSmsProviderById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*SmsProviderInfo, error)
		DeleteSmsProvider(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error)
	}

	defaultMcms struct {
		cli zrpc.Client
	}
)

func NewMcms(cli zrpc.Client) Mcms {
	return &defaultMcms{
		cli: cli,
	}
}

func (m *defaultMcms) SendEmail(ctx context.Context, in *EmailInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	client := core.NewMcmsClient(m.cli.Conn())
	return client.SendEmail(ctx, in, opts...)
}

// EmailLog management
func (m *defaultMcms) CreateEmailLog(ctx context.Context, in *EmailLogInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	client := core.NewMcmsClient(m.cli.Conn())
	return client.CreateEmailLog(ctx, in, opts...)
}

func (m *defaultMcms) UpdateEmailLog(ctx context.Context, in *EmailLogInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewMcmsClient(m.cli.Conn())
	return client.UpdateEmailLog(ctx, in, opts...)
}

func (m *defaultMcms) GetEmailLogList(ctx context.Context, in *EmailLogListReq, opts ...grpc.CallOption) (*EmailLogListResp, error) {
	client := core.NewMcmsClient(m.cli.Conn())
	return client.GetEmailLogList(ctx, in, opts...)
}

func (m *defaultMcms) GetEmailLogById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*EmailLogInfo, error) {
	client := core.NewMcmsClient(m.cli.Conn())
	return client.GetEmailLogById(ctx, in, opts...)
}

func (m *defaultMcms) DeleteEmailLog(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewMcmsClient(m.cli.Conn())
	return client.DeleteEmailLog(ctx, in, opts...)
}

// EmailProvider management
func (m *defaultMcms) CreateEmailProvider(ctx context.Context, in *EmailProviderInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := core.NewMcmsClient(m.cli.Conn())
	return client.CreateEmailProvider(ctx, in, opts...)
}

func (m *defaultMcms) UpdateEmailProvider(ctx context.Context, in *EmailProviderInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewMcmsClient(m.cli.Conn())
	return client.UpdateEmailProvider(ctx, in, opts...)
}

func (m *defaultMcms) GetEmailProviderList(ctx context.Context, in *EmailProviderListReq, opts ...grpc.CallOption) (*EmailProviderListResp, error) {
	client := core.NewMcmsClient(m.cli.Conn())
	return client.GetEmailProviderList(ctx, in, opts...)
}

func (m *defaultMcms) GetEmailProviderById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*EmailProviderInfo, error) {
	client := core.NewMcmsClient(m.cli.Conn())
	return client.GetEmailProviderById(ctx, in, opts...)
}

func (m *defaultMcms) DeleteEmailProvider(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewMcmsClient(m.cli.Conn())
	return client.DeleteEmailProvider(ctx, in, opts...)
}

func (m *defaultMcms) InitDatabase(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewMcmsClient(m.cli.Conn())
	return client.InitDatabase(ctx, in, opts...)
}

func (m *defaultMcms) SendSms(ctx context.Context, in *SmsInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	client := core.NewMcmsClient(m.cli.Conn())
	return client.SendSms(ctx, in, opts...)
}

// SmsLog management
func (m *defaultMcms) CreateSmsLog(ctx context.Context, in *SmsLogInfo, opts ...grpc.CallOption) (*BaseUUIDResp, error) {
	client := core.NewMcmsClient(m.cli.Conn())
	return client.CreateSmsLog(ctx, in, opts...)
}

func (m *defaultMcms) UpdateSmsLog(ctx context.Context, in *SmsLogInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewMcmsClient(m.cli.Conn())
	return client.UpdateSmsLog(ctx, in, opts...)
}

func (m *defaultMcms) GetSmsLogList(ctx context.Context, in *SmsLogListReq, opts ...grpc.CallOption) (*SmsLogListResp, error) {
	client := core.NewMcmsClient(m.cli.Conn())
	return client.GetSmsLogList(ctx, in, opts...)
}

func (m *defaultMcms) GetSmsLogById(ctx context.Context, in *UUIDReq, opts ...grpc.CallOption) (*SmsLogInfo, error) {
	client := core.NewMcmsClient(m.cli.Conn())
	return client.GetSmsLogById(ctx, in, opts...)
}

func (m *defaultMcms) DeleteSmsLog(ctx context.Context, in *UUIDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewMcmsClient(m.cli.Conn())
	return client.DeleteSmsLog(ctx, in, opts...)
}

// SmsProvider management
func (m *defaultMcms) CreateSmsProvider(ctx context.Context, in *SmsProviderInfo, opts ...grpc.CallOption) (*BaseIDResp, error) {
	client := core.NewMcmsClient(m.cli.Conn())
	return client.CreateSmsProvider(ctx, in, opts...)
}

func (m *defaultMcms) UpdateSmsProvider(ctx context.Context, in *SmsProviderInfo, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewMcmsClient(m.cli.Conn())
	return client.UpdateSmsProvider(ctx, in, opts...)
}

func (m *defaultMcms) GetSmsProviderList(ctx context.Context, in *SmsProviderListReq, opts ...grpc.CallOption) (*SmsProviderListResp, error) {
	client := core.NewMcmsClient(m.cli.Conn())
	return client.GetSmsProviderList(ctx, in, opts...)
}

func (m *defaultMcms) GetSmsProviderById(ctx context.Context, in *IDReq, opts ...grpc.CallOption) (*SmsProviderInfo, error) {
	client := core.NewMcmsClient(m.cli.Conn())
	return client.GetSmsProviderById(ctx, in, opts...)
}

func (m *defaultMcms) DeleteSmsProvider(ctx context.Context, in *IDsReq, opts ...grpc.CallOption) (*BaseResp, error) {
	client := core.NewMcmsClient(m.cli.Conn())
	return client.DeleteSmsProvider(ctx, in, opts...)
}
